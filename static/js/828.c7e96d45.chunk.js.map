{"version":3,"file":"static/js/828.c7e96d45.chunk.js","mappings":"+SACMA,EAAW,gCACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,EADpB,2BADO,cACxBG,EADwB,OAIxBC,EAASD,EAASE,KAAKC,QAJC,kBAKvBF,GALuB,2CAAH,qDAQhBG,EAAS,mCAAG,WAAMC,GAAN,yFACAN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,4DACyEQ,IAFzE,cACjBL,EADiB,OAIjBC,EAASD,EAASE,KAAKC,QAJN,kBAKhBF,GALgB,2CAAH,sDAQTK,EAAe,mCAAG,WAAMC,GAAN,yFACNR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,oBACcV,EADd,oBADM,cACvBG,EADuB,OAKvBQ,EAAUR,EAASE,KALI,kBAMtBM,GANsB,2CAAH,sDASfC,EAAe,mCAAG,WAAMF,GAAN,yFACNR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,4BACsBV,EADtB,oBADM,cACvBG,EADuB,OAIvBU,EAAUV,EAASE,KAAKS,KAJD,kBAKtBD,GALsB,2CAAH,sDAQfE,EAAe,mCAAG,WAAML,GAAN,yFACNR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,4BACsBV,EADtB,2BADM,cACvBG,EADuB,OAIvBa,EAAUb,EAASE,KAAKC,QAJD,kBAKtBU,GALsB,2CAAH,qD,6JC/BfC,EAAgB,WAAO,IAAD,IAE3BC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAErCC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0CE,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACLL,IAAU,iBAAC,8GAEab,EAAAA,EAAAA,IAAgBa,GAF7B,OAEFlB,EAFE,OAGRsB,EAAiBtB,GAHT,gDAKRwB,QAAQC,IAAR,MALQ,wDAAD,EASd,GAAE,CAACP,IAEJM,QAAQC,IAAIJ,GACZ,IACIK,EACAC,EAFIC,EAAqEP,EAArEO,YAAaC,EAAwDR,EAAxDQ,OAAQC,EAAgDT,EAAhDS,MAAOC,EAAyCV,EAAzCU,SAAUC,EAA+BX,EAA/BW,aAAcC,EAAiBZ,EAAjBY,aAK5D,OAFIJ,IAAUH,EAAaG,EAAOK,KAAI,SAAAC,GAAW,OAAOA,EAAMC,IAAM,IAAEC,KAAK,MACxEJ,IAAcN,EAAcM,EAAaK,MAAM,EAAE,KAEhD,4BAEA,SAAC,KAAD,CAAMC,GAAIzB,EAAV,6BACM,gBAAK0B,IAAG,yCAAoCZ,GAAea,IAAI,MACrE,0BAAKX,EAAL,MAAeH,EAAf,QACM,wCAAgBe,KAAKC,MAAmB,GAAbX,GAA3B,QACA,sCACA,uBAAID,KACJ,oCACA,uBAAIL,KAEV,2BACE,yBACE,SAAC,KAAD,CAAMa,GAAG,OAAT,qBAEF,yBACC,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGH,SAAC,EAAAK,SAAD,CAAUC,UAAU,yCAApB,UACE,SAAC,KAAD,QAKP,C","sources":["components/servises/Fetch.js","pages/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\nexport const getPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1&language=en-US`\n  );\n  const movies = response.data.results;\n  return movies;\n};\n\nexport const getMovies = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery}`\n  );\n  const movies = response.data.results;\n  return movies;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  const details = response.data;\n  return details;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const credits = response.data.cast;\n  return credits;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results;\n  return reviews;\n};\n","import { useParams, useLocation } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getMovieDetails } from \"../components/servises/Fetch\"\nimport { Link, Outlet } from \"react-router-dom\";\nimport { Suspense } from \"react\";\n\nexport const MoviesDetails = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? \"/movies\";\n \n  const { movieId } = useParams();\n  const [moviesDetails, setMoviesDetails] = useState([])\n      \n  useEffect(() => {\n    if(movieId){ (async function () {\n        try {\n          const movies = await getMovieDetails(movieId)\n          setMoviesDetails(movies)\n        } catch (error) {\n          console.log(error)\n        }\n        })()}\n\n  }, [movieId])\n \n  console.log(moviesDetails)\n  const { poster_path, genres, title, overview, vote_average, release_date } = moviesDetails\n  let genresInfo\n  let releasedate\n  if (genres) { genresInfo = genres.map(genre => { return genre.name }).join(\" \") }\n  if(release_date){releasedate = release_date.slice(0,4)}\n  return (\n      <div>\n\n      <Link to={backLinkHref}>‚Üê Go back</Link>\n            <img src={`http://image.tmdb.org/t/p/w400/${poster_path}`} alt=\"\" />\n      <h2>{title}  ({releasedate})</h2>\n            <p>User score: {Math.round(vote_average*10)}%</p>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <h3>Geners</h3>\n            <p>{genresInfo}</p>\n     \n      <ul>\n        <li>\n          <Link to=\"cast\" >Cast</Link>\n        </li>\n        <li>\n         <Link to=\"reviews\" >Reviews</Link>\n        </li>\n       </ul>\n      <Suspense fallback={<div>Loading ...</div>}>\n        <Outlet />\n      </Suspense>\n        </div>\n  \n    )\n};\n\n\n"],"names":["BASE_URL","API_KEY","getPopularMovies","axios","response","movies","data","results","getMovies","searchQuery","getMovieDetails","id","details","getMovieCredits","credits","cast","getMovieReviews","reviews","MoviesDetails","backLinkHref","useLocation","state","from","movieId","useParams","useState","moviesDetails","setMoviesDetails","useEffect","console","log","genresInfo","releasedate","poster_path","genres","title","overview","vote_average","release_date","map","genre","name","join","slice","to","src","alt","Math","round","Suspense","fallback"],"sourceRoot":""}